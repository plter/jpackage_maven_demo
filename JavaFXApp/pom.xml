<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.topyunp</groupId>
    <artifactId>JavaFXApp</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>JavaFXApp</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <junit.version>5.7.1</junit.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>11.0.2</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>11.0.2</version>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.github.akman</groupId>
                    <artifactId>jpackage-maven-plugin</artifactId>
                    <version>0.1.3</version>
                    <configuration>
                        <!--
                          Specifies the JDK home path which provides the tool needed.
                          If not specified the jpackage tool executable will be find in
                          the following order:

                            - user specified JDK home directory by toolchains-plugin
                            - JDK home directory specified by system variable JAVA_HOME
                            - system path specified by system variable PATH
                        -->
                        <toolhome>${env.JPACKAGE_HOME}</toolhome>

                        <!--
                          Specifies the location in which generated output files are placed.
                          Default value: ${project.build.directory}/jpackage
                        -->
                        <dest>${project.build.directory}/jpackage</dest>

                        <!--
                          Specifies version of the application and/or package.
                        -->
                        <appversion>1.0</appversion>

                        <name>JavaFxApp</name>

                        <!--
                          Specifies the module path. The path where the jlink tool
                          discovers observable modules: modular JAR files, JMOD files,
                          exploded modules. If this option is not specified, then
                          the default module path is $ JAVA_HOME/jmods. This directory
                          contains the java.base module and the other standard and
                          JDK modules. If this option is specified but the java.base
                          module cannot be resolved from it, then the jlink command
                          appends $ JAVA_HOME/jmods to the module path.
                          Pass on &dash;-modulepath option to jlink.

                          pathelements - passed to jlink as is
                          filesets - sets of files (without directories)
                          dirsets - sets of directories (without files)
                          dependencysets - sets of dependencies with specified includes
                                           and excludes patterns (glob: or regex:)
                                           for file names and regex patterns only
                                           for module names, and excludes
                                           for automatic modules
                        -->
                        <modulepath>
                            <dependencysets>
                                <dependencyset>
                                    <includeoutput>true</includeoutput>
                                    <excludeautomatic>true</excludeautomatic>
                                </dependencyset>
                            </dependencysets>
                        </modulepath>
                        <module>com.topyunp.javafxapp/com.topyunp.javafxapp.HelloApplication</module>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.7</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running with: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>com.topyunp.javafxapp/com.topyunp.javafxapp.HelloApplication</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.akman</groupId>
                <artifactId>jpackage-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>jpackage-installer</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jpackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>